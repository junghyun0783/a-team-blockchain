<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	https://www.springframework.org/schema/context/spring-context.xsd
	http://mybatis.org/schema/mybatis-spring
	http://mybatis.org/schema/mybatis-spring-1.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<!-- DB 관련 세팅 -->
	<!-- 커넥션 관련 설정 정보  -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" /> 
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@javaking.iptime.org:1521:ORCL" />
		<property name="username" value="java05" />
		<property name="password" value="java05" />
	</bean>
	<!-- 커넥션 맺어줄때 사용하는 클래스 등록 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	 
	 <!-- 커넥션 풀 역할 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="/WEB-INF/spring/mybatis-config.xml"/> <!--  mybatis-config.xml파일을 가져와 사용하도록!	 -->
	</bean>
		
		
	<!-- mybatis로 mapper 패키지 스캔 추가 -->
	<mybatis-spring:scan base-package="com.member.mapper"/>
	<mybatis-spring:scan base-package="com.board.mapper"/>	
	<!-- spring과 service 패키지 스캔해 -->
	<context:component-scan base-package="com.member.service" />
	<context:component-scan base-package="com.board.service" />
	
	<!-- ** aop ** -->
	<!-- #2. aop 테스트할 서비스패키지 스캔추가 : 서비스클래스 스프링이 객체 생성해서 관리해라 
	<context:component-scan base-package="com.aop.service" />-->
	
	<!-- #4. aop 스키마 추가, advice 패키지 컴포넌트 스캔, autoproxy 태그 추가  -->
	<!-- 어드바이스 패키지 스캔 : 어드바이스 클래스 객체생성해서 관리되도록 
	<context:component-scan base-package="com.aop.advice" />-->
	<!-- @Aspect 어노테이션으로 설정된 빈 객체를 Aspect로 사용하게 해줌. 
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	
	
	
</beans>
